{"version":3,"file":"chips.component.js","sourceRoot":"","sources":["chips.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAW,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAwB,MAAM,gBAAgB,CAAC;AAEzE,IAAM,IAAI,GAAQ;IAChB,eAAe;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,+BAA+B,GAAQ;IAClD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,gBAAgB,EAAhB,CAAgB,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;AAQF,IAAa,gBAAgB;IAN7B;QAQE;;WAEG;QACK,WAAM,GAAQ,EAAE,CAAC;QAEjB,YAAO,GAAW,CAAC,CAAC;QACpB,kBAAa,GAAY,KAAK,CAAC;QAEvC;;WAEG;QACH,YAAO,GAAY,IAAI,CAAC;QACxB;;WAEG;QACH,YAAO,GAAY,KAAK,CAAC;QAEzB;;;WAGG;QACa,UAAK,GAAa,EAAE,CAAC;QAerC;;;WAGG;QACgB,aAAQ,GAAY,KAAK,CAAC;QAQ7C;;;;WAIG;QACY,QAAG,GAAyB,IAAI,YAAY,EAAU,CAAC;QAEtE;;;;WAIG;QACe,WAAM,GAAyB,IAAI,YAAY,EAAU,CAAC;QA8F5E,aAAQ,GAAG,UAAC,CAAM,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC;QAC5B,cAAS,GAAG,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;IAEzB,CAAC;IAhIC,sBAAI,0CAAY;aAGhB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;QAXD;;;;WAIG;aAEH,UAAiB,YAAiB;YAChC,IAAI,CAAC,aAAa,GAAG,YAAY,KAAK,EAAE,GAAG,CAAC,YAAY,KAAK,MAAM,IAAI,YAAY,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC;QACvG,CAAC;;;OAAA;IAkCQ,sBAAI,mCAAK;aAMlB,cAAmB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QATxC;;WAEG;aACM,UAAU,CAAM;YACvB,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;;;OAAA;IACuC,CAAC;IAEzC,oCAAS,GAAT;QACE,mDAAmD;QACnD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAMD,sBAAI,2CAAa;QAJjB;;;WAGG;aACH;YAAA,iBAOC;YANC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,EAAE,CAAC;YACZ,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAY;gBACpC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;;;OAAA;IAED;;;OAGG;IACH,kCAAO,GAAP,UAAQ,KAAa;QACnB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,qCAAU,GAAV,UAAW,KAAa;QACtB,IAAI,KAAK,GAAW,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,sCAAW,GAAX;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,qCAAU,GAAV;QACE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,qCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,2CAAgB,GAAhB,UAAiB,EAAO;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,4CAAiB,GAAjB,UAAkB,EAAO;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAKH,uBAAC;AAAD,CAAC,AA/JD,IA+JC;AAxIiB;IAAf,KAAK,CAAC,OAAO,CAAC;;+CAAsB;AAQrC;IADC,KAAK,CAAC,cAAc,CAAC;;;oDAGrB;AASkB;IAAlB,KAAK,CAAC,UAAU,CAAC;;kDAA2B;AAMvB;IAArB,KAAK,CAAC,aAAa,CAAC;;qDAAqB;AAO3B;IAAd,MAAM,CAAC,KAAK,CAAC;8BAAM,YAAY;6CAAsC;AAOpD;IAAjB,MAAM,CAAC,QAAQ,CAAC;8BAAS,YAAY;gDAAsC;AAKnE;IAAR,KAAK,EAAE;;;6CAKP;AAxEU,gBAAgB;IAN5B,SAAS,CAAC;QACT,SAAS,EAAE,CAAE,+BAA+B,CAAE;QAC9C,QAAQ,EAAE,UAAU;QACpB,SAAS,EAAE,CAAC,uBAAuB,CAAC;QACpC,WAAW,EAAE,wBAAwB;KACtC,CAAC;GACW,gBAAgB,CA+J5B;SA/JY,gBAAgB","sourcesContent":["import { Component, Input, Output, forwardRef, DoCheck } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nconst noop: any = () => {\n  // empty method\n};\n\nexport const TD_CHIPS_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TdChipsComponent),\n  multi: true,\n};\n\n@Component({\n  providers: [ TD_CHIPS_CONTROL_VALUE_ACCESSOR ],\n  selector: 'td-chips',\n  styleUrls: ['./chips.component.css'],\n  templateUrl: './chips.component.html',\n})\nexport class TdChipsComponent implements ControlValueAccessor, DoCheck {\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  private _value: any = [];\n\n  private _length: number = 0;\n  private _requireMatch: boolean = false;\n\n  /**\n   * Boolean value that specifies if the input is valid against the provieded list.\n   */\n  matches: boolean = true;\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  focused: boolean = false;\n\n  /**\n   * items?: string[]\n   * Enables Autocompletion with the provided list of strings.\n   */\n  @Input('items') items: string[] = [];\n\n  /**\n   * requireMatch?: boolean\n   * Validates input against the provided list before adding it to the model.\n   * If it doesnt exist, it cancels the event.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: any) {\n    this._requireMatch = requireMatch !== '' ? (requireMatch === 'true' || requireMatch === true) : true;\n  }\n  get requireMatch(): any {\n    return this._requireMatch;\n  }\n\n  /**\n   * readOnly?: boolean\n   * Disables the chip input and removal.\n   */\n  @Input('readOnly') readOnly: boolean = false;\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * add?: function\n   * Method to be executed when string is added as chip through the autocomplete.\n   * Sends chip value as event.\n   */\n  @Output('add') add: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * remove?: function\n   * Method to be executed when string is removed as chip with the \"remove\" button.\n   * Sends chip value as event.\n   */\n  @Output('remove') remove: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  @Input() set value(v: any) {\n    if (v !== this._value) {\n      this._value = v;\n      this._length = this._value ? this._value.length : 0;\n    }\n  }\n  get value(): any { return this._value; };\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this._value && this._value.length !== this._length) {\n      this._length = this._value.length;\n      this.onChange(this._value);\n    }\n  }\n\n  /**\n   * Returns a list of filtered items.\n   * Removes the ones that have been added as value.\n   */\n  get filteredItems(): string[] {\n    if (!this._value) {\n      return [];\n    }\n    return this.items.filter((item: string) => {\n      return this._value.indexOf(item) < 0;\n    });\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addItem(value: string): boolean {\n    if (value.trim() === '' || this._value.indexOf(value) > -1) {\n      return false;\n    }\n    if (this.items && this.requireMatch) {\n      if (this.items.indexOf(value) < 0) {\n        return false;\n      }\n    }\n    this._value.push(value);\n    this.add.emit(value);\n    this.onChange(this._value);\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeItem(value: string): boolean {\n    let index: number = this._value.indexOf(value);\n    if (index < 0) {\n      return false;\n    }\n    this._value.splice(index, 1);\n    this.remove.emit(value);\n    this.onChange(this._value);\n    return true;\n  }\n\n  handleFocus(): boolean {\n    this.focused = true;\n    return true;\n  }\n\n  handleBlur(): boolean {\n    this.focused = false;\n    this.onTouched();\n    return true;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  onChange = (_: any) => noop;\n  onTouched = () => noop;\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}