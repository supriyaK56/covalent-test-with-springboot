{"version":3,"file":"min.validator.js","sourceRoot":"","sources":["min.validator.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAa,UAAU,EAAgC,MAAM,gBAAgB,CAAC;AAEpG,OAAO,EAAE,yBAAyB,EAAE,MAAM,8CAA8C,CAAC;AAEzF,MAAM,CAAC,IAAM,aAAa,GAAQ;IAChC,OAAO,EAAE,aAAa;IACtB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,cAAc,EAAd,CAAc,CAAC;IAC7C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMF,IAAa,cAAc;IAA3B;IAwBA,CAAC;IAnBC,sBAAI,+BAAG;aAAP,UAAQ,GAAW;YACjB,IAAI,CAAC,UAAU,GAAG,gBAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjD,CAAC;;;OAAA;IAEM,uBAAQ,GAAf,UAAgB,QAAa;QAC3B,MAAM,CAAC,UAAC,CAAkB;YACxB,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzG,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,GAAW,CAAC,CAAC,KAAK,CAAC;YACxB,MAAM,CAAC,CAAC,GAAG,QAAQ;gBACjB,EAAE,GAAG,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,EAAC,EAAE;gBAC7C,SAAS,CAAC;QACd,CAAC,CAAC;IACJ,CAAC;IAAA,CAAC;IAEF,iCAAQ,GAAR,UAAS,CAAkB;QACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAAA,CAAC;IACJ,qBAAC;AAAD,CAAC,AAxBD,IAwBC;AAnBC;IADC,KAAK,CAAC,KAAK,CAAC;;;yCAGZ;AAPU,cAAc;IAJ1B,SAAS,CAAC;QACT,QAAQ,EAAE,0DAA0D;QACpE,SAAS,EAAE,CAAE,aAAa,CAAE;KAC7B,CAAC;GACW,cAAc,CAwB1B;SAxBY,cAAc","sourcesContent":["import { Directive, Input, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\n\nimport { TdNumberRequiredValidator } from '../number-required/number-required.validator';\n\nexport const MIN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => TdMinValidator),\n  multi: true,\n};\n\n@Directive({\n  selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n  providers: [ MIN_VALIDATOR ],\n})\nexport class TdMinValidator implements Validator {\n\n  private _validator: ValidatorFn;\n\n  @Input('min')\n  set min(min: number) {\n    this._validator = TdMinValidator.validate(min);\n  }\n\n  static validate(minValue: any): ValidatorFn {\n    return (c: AbstractControl): {[key: string]: any} => {\n      if (!!Validators.required(c) || !!TdNumberRequiredValidator.validate(c) || (!minValue && minValue !== 0)) {\n        return undefined;\n      }\n      let v: number = c.value;\n      return v < minValue ?\n        { min: {minValue: minValue, actualValue: v} } :\n        undefined;\n    };\n  };\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this._validator(c);\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}