{"version":3,"file":"step-header.component.js","sourceRoot":"","sources":["step-header.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEjD,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAO9C,IAAa,qBAAqB;IALlC;QAwBE;;;;WAIG;QACa,UAAK,GAAc,SAAS,CAAC,IAAI,CAAC;IAepD,CAAC;IAbC;;OAEG;IACH,0CAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,QAAQ,CAAC;IAC3C,CAAC;IAAA,CAAC;IAEF;;OAEG;IACH,0CAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,QAAQ,CAAC;IAC3C,CAAC;IAAA,CAAC;IACJ,4BAAC;AAAD,CAAC,AAvCD,IAuCC;AAlCkB;IAAhB,KAAK,CAAC,QAAQ,CAAC;;qDAAgB;AAMf;IAAhB,KAAK,CAAC,QAAQ,CAAC;;qDAAiB;AAMd;IAAlB,KAAK,CAAC,UAAU,CAAC;;uDAAmB;AAOrB;IAAf,KAAK,CAAC,OAAO,CAAC;;oDAAmC;AAxBvC,qBAAqB;IALjC,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,SAAS,EAAE,CAAC,6BAA6B,CAAC;QAC1C,WAAW,EAAE,8BAA8B;KAC5C,CAAC;GACW,qBAAqB,CAuCjC;SAvCY,qBAAqB","sourcesContent":["import { Component, Input } from '@angular/core';\n\nimport { StepState } from '../step.component';\n\n@Component({\n  selector: 'td-step-header',\n  styleUrls: ['./step-header.component.css'],\n  templateUrl: './step-header.component.html',\n})\nexport class TdStepHeaderComponent {\n\n  /**\n   * Number assigned to [TdStepHeaderComponent].\n   */\n  @Input('number') number: number;\n\n  /**\n   * active?: boolean\n   * Sets for active/inactive states on header.\n   */\n  @Input('active') active: boolean;\n\n  /**\n   * disabled?: boolean\n   * Sets styles for disabled state on icon and header.\n   */\n  @Input('disabled') disabled: boolean;\n\n  /**\n   * state?: StepState or ['none' | 'required' | 'complete']\n   * Sets styles for state of header.\n   * Defaults to [StepState.None | 'none'].\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.\n   */\n  isComplete(): boolean {\n    return this.state === StepState.Complete;\n  };\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Required | 'required'], else 'false'.\n   */\n  isRequired(): boolean {\n    return this.state === StepState.Required;\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}