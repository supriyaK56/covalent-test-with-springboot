{"version":3,"file":"file-select.directive.js","sourceRoot":"","sources":["file-select.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC1E,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAKzC,IAAa,qBAAqB;IA8BhC,+BAAwC,KAAc;QAAd,UAAK,GAAL,KAAK,CAAS;QA5B9C,cAAS,GAAY,KAAK,CAAC;QAYnC;;;;;WAKG;QACmB,iBAAY,GAAkC,IAAI,YAAY,EAAmB,CAAC;IAWxG,CAAC;IArBD,sBAAI,2CAAQ;QANZ;;;;WAIG;aAEH,UAAa,QAA0B;YACrC,IAAI,CAAC,SAAS,GAAG,QAAQ,KAAK,EAAE,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC;QACvF,CAAC;;;OAAA;IAcD,sBAAI,kDAAe;QAJnB;;WAEG;aAEH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,GAAG,SAAS,CAAC;QACzC,CAAC;;;OAAA;IAKD;;;;OAIG;IAEH,wCAAQ,GAAR,UAAS,KAAY;QACnB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,YAAY,gBAAgB,CAAC,CAAC,CAAC;YAC7C,IAAI,WAAW,GAAwC,KAAK,CAAC,MAAO,CAAC;YACrE,IAAI,KAAK,GAAa,WAAW,CAAC,KAAK,CAAC;YACxC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,IAAI,KAAK,GAAoB,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/F,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC;IACH,CAAC;IACH,4BAAC;AAAD,CAAC,AAjDD,IAiDC;AAvCC;IADC,KAAK,CAAC,UAAU,CAAC;;;qDAGjB;AAQqB;IAArB,MAAM,CAAC,YAAY,CAAC;8BAAe,YAAY;2DAAwD;AAMxG;IADC,WAAW,CAAC,eAAe,CAAC;;;4DAG5B;AAWD;IADC,YAAY,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;;qCACnB,KAAK;;qDASpB;AAhDU,qBAAqB;IAHjC,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;KAC3B,CAAC;IA+Ba,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,IAAI,EAAE,CAAA;qCAAgB,OAAO;GA9B3C,qBAAqB,CAiDjC;SAjDY,qBAAqB","sourcesContent":["import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, Host, Optional } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: '[tdFileSelect]',\n})\nexport class TdFileSelectDirective {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be selected at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: string | boolean) {\n    this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;\n  }\n\n  /**\n   * fileSelect?: function\n   * Event emitted when a file or files are selected in host [HTMLInputElement].\n   * Emits a [FileList | File] object.\n   * Alternative to not use [(ngModel)].\n   */\n  @Output('fileSelect') onFileSelect: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  constructor(@Optional() @Host() private model: NgModel) {\n  }\n\n  /**\n   * Listens to 'change' host event to get [HTMLInputElement] files.\n   * Emits the 'onFileSelect' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Uses [(ngModel)] if declared, instead of emitting 'onFileSelect' event.\n   */\n  @HostListener('change', ['$event'])\n  onChange(event: Event): void {\n    if (event.target instanceof HTMLInputElement) {\n      let fileInputEl: HTMLInputElement = (<HTMLInputElement>event.target);\n      let files: FileList = fileInputEl.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.model ? this.model.update.emit(value) : this.onFileSelect.emit(value);\n      }\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}