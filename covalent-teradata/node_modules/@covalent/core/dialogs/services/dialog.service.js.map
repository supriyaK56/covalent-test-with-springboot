{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, ViewContainerRef } from '@angular/core';\nimport { MdDialog, MdDialogRef, MdDialogConfig, ComponentType } from '@angular/material';\n\nimport { TdAlertDialogComponent } from '../alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from '../prompt-dialog/prompt-dialog.component';\n\nexport interface IDialogConfig {\n  title?: string;\n  message: string;\n  viewContainerRef?: ViewContainerRef;\n  disableClose?: boolean;\n}\n\nexport interface IAlertConfig extends IDialogConfig {\n  closeButton?: string;\n}\n\nexport interface IConfirmConfig extends IDialogConfig {\n  acceptButton?: string;\n  cancelButton?: string;\n}\n\nexport interface IPromptConfig extends IConfirmConfig {\n  value?: string;\n}\n\n@Injectable()\nexport class TdDialogService {\n\n  constructor(private _dialogService: MdDialog) {}\n\n  /**\n   * params:\n   * - component: ComponentType<T>\n   * - config: MdDialogConfig\n   * Wrapper function over the open() method in MdDialog.\n   * Opens a modal dialog containing the given component.\n   */\n  public open<T>(component: ComponentType<T>, config?: MdDialogConfig): MdDialogRef<T> {\n    return this._dialogService.open(component, config);\n  }\n\n  /**\n   * Wrapper function over the closeAll() method in MdDialog.\n   * Closes all of the currently-open dialogs.\n   */\n  public closeAll(): void {\n    this._dialogService.closeAll();\n  }\n\n  /**\n   * params:\n   * - config: IAlertConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     closeButton?: string;\n   * }\n   *\n   * Opens an alert dialog with the provided config.\n   * Returns an MdDialogRef<TdAlertDialogComponent> object.\n   */\n  public openAlert(config: IAlertConfig): MdDialogRef<TdAlertDialogComponent> {\n    let dialogConfig: MdDialogConfig = this._createConfig(config);\n    let dialogRef: MdDialogRef<TdAlertDialogComponent> =\n      this._dialogService.open(TdAlertDialogComponent, dialogConfig);\n    let alertDialogComponent: TdAlertDialogComponent = dialogRef.componentInstance;\n    alertDialogComponent.title = config.title;\n    alertDialogComponent.message = config.message;\n    if (config.closeButton) {\n      alertDialogComponent.closeButton = config.closeButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IConfirmConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a confirm dialog with the provided config.\n   * Returns an MdDialogRef<TdConfirmDialogComponent> object.\n   */\n  public openConfirm(config: IConfirmConfig): MdDialogRef<TdConfirmDialogComponent> {\n    let dialogConfig: MdDialogConfig = this._createConfig(config);\n    let dialogRef: MdDialogRef<TdConfirmDialogComponent> =\n      this._dialogService.open(TdConfirmDialogComponent, dialogConfig);\n    let confirmDialogComponent: TdConfirmDialogComponent = dialogRef.componentInstance;\n    confirmDialogComponent.title = config.title;\n    confirmDialogComponent.message = config.message;\n    if (config.acceptButton) {\n      confirmDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      confirmDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IPromptConfig {\n   *     message: string;\n   *     title?: string;\n   *     value?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a prompt dialog with the provided config.\n   * Returns an MdDialogRef<TdPromptDialogComponent> object.\n   */\n  public openPrompt(config: IPromptConfig): MdDialogRef<TdPromptDialogComponent> {\n    let dialogConfig: MdDialogConfig = this._createConfig(config);\n    let dialogRef: MdDialogRef<TdPromptDialogComponent> =\n      this._dialogService.open(TdPromptDialogComponent, dialogConfig);\n    let promptDialogComponent: TdPromptDialogComponent = dialogRef.componentInstance;\n    promptDialogComponent.title = config.title;\n    promptDialogComponent.message = config.message;\n    promptDialogComponent.value = config.value;\n    if (config.acceptButton) {\n      promptDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      promptDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  private _createConfig(config: MdDialogConfig): MdDialogConfig {\n    let dialogConfig: MdDialogConfig = new MdDialogConfig();\n    dialogConfig.viewContainerRef = config.viewContainerRef;\n    dialogConfig.disableClose = config.disableClose;\n    return dialogConfig;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}