{"version":3,"file":"layout-nav.component.js","sourceRoot":"","sources":["layout-nav.component.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAE/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAOxD,IAAa,oBAAoB;IAuC/B,8BAA6E,OAA0B;QAA1B,YAAO,GAAP,OAAO,CAAmB;QAfvG;;;;;WAKG;QACa,UAAK,GAAW,SAAS,CAAC;IASgE,CAAC;IAJ3G,sBAAI,wDAAsB;QAH1B;;WAEG;aACH;YACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAID;;OAEG;IACH,8CAAe,GAAf;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IACH,2BAAC;AAAD,CAAC,AA/CD,IA+CC;AAxCwB;IAAtB,KAAK,CAAC,cAAc,CAAC;;0DAAsB;AAO7B;IAAd,KAAK,CAAC,MAAM,CAAC;;kDAAc;AAQb;IAAd,KAAK,CAAC,MAAM,CAAC;;kDAAc;AAQZ;IAAf,KAAK,CAAC,OAAO,CAAC;;mDAA2B;AA9B/B,oBAAoB;IALhC,SAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,SAAS,EAAE,CAAC,4BAA4B,CAAC;QACzC,WAAW,EAAE,6BAA6B;KAC3C,CAAC;IAwCa,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,UAAU,CAAC,cAAM,OAAA,iBAAiB,EAAjB,CAAiB,CAAC,CAAC,CAAA;qCAAkB,iBAAiB;GAvC5F,oBAAoB,CA+ChC;SA/CY,oBAAoB","sourcesContent":["import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\n\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styleUrls: ['./layout-nav.component.css'],\n  templateUrl: './layout-nav.component.html',\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * Checks if there is a [TdLayoutComponent] as parent.\n   */\n  get isMainSidenavAvailable(): boolean {\n    return !!this._layout;\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) private _layout: TdLayoutComponent) {}\n\n  /**\n   * If main sidenav is available, it will open the sidenav of the parent [TdLayoutComponent].\n   */\n  openMainSidenav(): void {\n    this._layout.open();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}