{"version":3,"file":"navigation-drawer.component.js","sourceRoot":"","sources":["navigation-drawer.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Directive, Input, ContentChildren, OnInit, OnDestroy, forwardRef, Inject,\n         QueryList, SecurityContext } from '@angular/core';\nimport { SafeResourceUrl, SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { MdSidenavToggleResult } from '@angular/material';\n\nimport { TdLayoutComponent } from '../layout.component';\n\nimport { TdCollapseAnimation } from '../../common/animations/collapse/collapse.animation';\n\n@Directive({\n  selector: '[td-navigation-drawer-menu]',\n})\nexport class TdNavigationDrawerMenuDirective {\n\n}\n\n@Component({\n  selector: 'td-navigation-drawer',\n  styleUrls: ['./navigation-drawer.component.css'],\n  templateUrl: './navigation-drawer.component.html',\n  animations: [ TdCollapseAnimation() ],\n})\nexport class TdNavigationDrawerComponent implements OnInit, OnDestroy {\n\n  private _closeSubscription: Subscription;\n  private _menuToggled: boolean = false;\n  private _backgroundImage: SafeStyle;\n\n  get menuToggled(): boolean {\n    return this._menuToggled;\n  }\n\n  @ContentChildren(TdNavigationDrawerMenuDirective) private _drawerMenu: QueryList<TdNavigationDrawerMenuDirective>;\n\n  /**\n   * Checks if there is a [TdNavigationDrawerMenuDirective] as content.\n   */\n  get isMenuAvailable(): boolean {\n    return this._drawerMenu.length > 0;\n  }\n\n  /**\n   * Checks if there is a background image for the toolbar.\n   */\n  get isBackgroundAvailable(): boolean {\n    return !!this._backgroundImage;\n  }\n\n  /**\n   * sidenavTitle?: string\n   * Title set in sideNav.\n   */\n  @Input('sidenavTitle') sidenavTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, default is used.\n   */\n  @Input('color') color: string;\n\n  /**\n   * backgroundUrl?: SafeResourceUrl\n   *\n   * image to be displayed as the background of the toolbar.\n   * URL used will be sanitized, but it should be always from a trusted source to avoid XSS.\n   */\n  @Input('backgroundUrl')\n  // TODO angular complains with warnings if this is type [SafeResourceUrl].. so we will make it <any> until its fixed.\n  // https://github.com/webpack/webpack/issues/2977\n  set backgroundUrl(backgroundUrl: any) {\n    if (backgroundUrl) {\n      let sanitizedUrl: string = this._sanitize.sanitize(SecurityContext.RESOURCE_URL, backgroundUrl);\n      this._backgroundImage = this._sanitize.sanitize(SecurityContext.STYLE, 'url(' + sanitizedUrl + ')');\n    }\n  }\n  get backgroundImage(): SafeStyle {\n    return this._backgroundImage;\n  }\n\n  /**\n   * name?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel.\n   * if [email] is not set, then [name] will be the toggle menu text.\n   */\n  @Input('name') name: string;\n\n  /**\n   * email?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel in the [toggle] menu text.\n   * if [email] and [name] are not set, then the toggle menu is not rendered.\n   */\n  @Input('email') email: string;\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) private _layout: TdLayoutComponent,\n              private _sanitize: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this._closeSubscription = this._layout.sidenav.onClose.subscribe(() => {\n      this._menuToggled = false;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._closeSubscription) {\n      this._closeSubscription.unsubscribe();\n      this._closeSubscription = undefined;\n    }\n  }\n\n  toggleMenu(): void {\n    if (this.isMenuAvailable) {\n      this._menuToggled = !this._menuToggled;\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MdSidenavToggleResult> {\n    return this._layout.toggle();\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MdSidenavToggleResult> {\n    return this._layout.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MdSidenavToggleResult> {\n    return this._layout.close();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}