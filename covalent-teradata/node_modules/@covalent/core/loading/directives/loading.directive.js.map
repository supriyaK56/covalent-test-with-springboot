{"version":3,"file":"loading.directive.js","sourceRoot":"","sources":["loading.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\n\nimport { LoadingType, LoadingMode, LoadingStrategy } from '../loading.component';\nimport { TdLoadingService } from '../services/loading.service';\n\n@Directive({\n  selector: '[tdLoading]',\n})\nexport class TdLoadingDirective implements OnInit, OnDestroy {\n\n  private _type: LoadingType;\n  private _mode: LoadingMode;\n  private _strategy: LoadingStrategy;\n  private _name: string;\n\n  /**\n   * tdLoading?: string\n   * Name reference of the loading mask, used to register/resolve requests to the mask.\n   */\n  @Input('tdLoading')\n  set name(name: string) {\n    this._name = name;\n  }\n\n  /**\n   * @deprecated in 1.0.0-beta.1\n   *\n   * Please use the `tdLoadingType` method.\n   */\n  @Input('loadingType')\n  set typeDeprecated(type: LoadingType) {\n    /* tslint:disable-next-line */\n    console.warn(\"loadingType is deprecated.  Please use tdLoadingType instead\");\n    this.type = type;\n  }\n  /**\n   * tdLoadingType?: LoadingType or ['linear' | 'circular']\n   * Sets the type of loading mask depending on value.\n   * Defaults to [LoadingType.Circular | 'circular'].\n   */\n  @Input('tdLoadingType')\n  set type(type: LoadingType) {\n    switch (type) {\n      case LoadingType.Linear:\n        this._type = LoadingType.Linear;\n        break;\n      default:\n        this._type = LoadingType.Circular;\n        break;\n    }\n  }\n\n  /**\n   * @deprecated in 1.0.0-beta.1\n   *\n   * Please use the `tdLoadingMode` method.\n   */\n  @Input('loadingMode')\n  set modeDeprecated(mode: LoadingMode) {\n    /* tslint:disable-next-line */\n    console.warn(\"loadingMode is deprecated.  Please use tdLoadingMode instead\");\n    this.mode = mode;\n  }\n  /**\n   * tdLoadingMode?: LoadingMode or ['determinate' | 'indeterminate']\n   * Sets the mode of loading mask depending on value.\n   * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].\n   */\n  @Input('tdLoadingMode')\n  set mode(mode: LoadingMode) {\n    switch (mode) {\n      case LoadingMode.Determinate:\n        this._mode = LoadingMode.Determinate;\n        break;\n      default:\n        this._mode = LoadingMode.Indeterminate;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingStrategy?: LoadingStrategy or ['replace' | 'overlay']\n   * Sets the strategy of loading mask depending on value.\n   * Defaults to [LoadingMode.Replace | 'replace'].\n   */\n  @Input('tdLoadingStrategy')\n  set strategy(stategy: LoadingStrategy) {\n    switch (stategy) {\n      case LoadingStrategy.Overlay:\n        this._strategy = LoadingStrategy.Overlay;\n        break;\n      default:\n        this._strategy = LoadingStrategy.Replace;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingColor?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the loading component. Defaults to \"primary\"\n   */\n  @Input('tdLoadingColor') color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _viewContainerRef: ViewContainerRef,\n              private _templateRef: TemplateRef<Object>,\n              private _loadingService: TdLoadingService) {}\n\n  /**\n   * Registers component in the DOM, so it will be available when calling resolve/register.\n   */\n  ngOnInit(): void {\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n    this._registerComponent();\n  }\n\n  /**\n   * Remove component when directive is destroyed.\n   */\n  ngOnDestroy(): void {\n    this._loadingService.removeComponent(this._name);\n  }\n\n  /**\n   * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].\n   * Passes this directive's [TemplateRef] to modify DOM depending on loading `strategy`.\n   */\n  private _registerComponent(): void {\n    if (!this._name) {\n      throw new Error('Name is needed to register loading directive');\n    }\n    this._loadingService.createComponent({\n      name: this._name,\n      type: this._type,\n      mode: this._mode,\n      color: this.color,\n      strategy: this._strategy,\n    }, this._viewContainerRef, this._templateRef);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}