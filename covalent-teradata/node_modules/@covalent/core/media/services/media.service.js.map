{"version":3,"file":"media.service.js","sourceRoot":"","sources":["media.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class TdMediaService {\n\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: {[key: string]: Subject<boolean>} = {};\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', 'landscape');\n    this._queryMap.set('portrait', 'portrait');\n    this._queryMap.set('print', 'print');\n\n    let running: boolean = false;\n    window.onresize = () => {\n      // way to prevent the resize event from triggering the match media if there is already one event running already.\n      if (!running) {\n        running = true;\n        if (window.requestAnimationFrame) {\n          window.requestAnimationFrame(() => {\n            this._onResize();\n            running = false;\n          });\n        } else {\n          setTimeout(() => {\n            this._onResize();\n            running = false;\n          }, 66);\n        }\n      }\n    };\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return window.matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new Subject<boolean>();\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(window.matchMedia(query).matches);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}