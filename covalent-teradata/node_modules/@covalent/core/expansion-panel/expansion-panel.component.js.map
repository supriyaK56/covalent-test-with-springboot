{"version":3,"file":"expansion-panel.component.js","sourceRoot":"","sources":["expansion-panel.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Directive, Input, Output, TemplateRef, ViewContainerRef, ContentChild } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/material';\n\nimport { TdCollapseAnimation } from '../common/common.module';\n\n@Directive({\n  selector: '[td-expansion-panel-header]template',\n})\nexport class TdExpansionPanelHeaderDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-expansion-panel-label]template',\n})\nexport class TdExpansionPanelLabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-expansion-panel-sublabel]template',\n})\nexport class TdExpansionPanelSublabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Component({\n  selector: 'td-expansion-summary',\n  template: '<ng-content></ng-content>',\n})\nexport class TdExpansionPanelSummaryComponent {}\n\n@Component({\n  selector: 'td-expansion-panel',\n  styleUrls: ['./expansion-panel.component.css'],\n  templateUrl: './expansion-panel.component.html',\n  animations: [\n    TdCollapseAnimation(),\n  ],\n})\nexport class TdExpansionPanelComponent {\n\n  private _expand: boolean = false;\n  private _disabled: boolean = false;\n\n  @ContentChild(TdExpansionPanelHeaderDirective) expansionPanelHeader: TdExpansionPanelHeaderDirective;\n  @ContentChild(TdExpansionPanelLabelDirective) expansionPanelLabel: TdExpansionPanelLabelDirective;\n  @ContentChild(TdExpansionPanelSublabelDirective) expansionPanelSublabel: TdExpansionPanelSublabelDirective;\n\n  /**\n   * label?: string\n   * Sets label of [TdExpansionPanelComponent] header.\n   * Defaults to 'Click to expand'\n   */\n  @Input() label: string;\n\n  /**\n   * sublabel?: string\n   * Sets sublabel of [TdExpansionPanelComponent] header.\n   */\n  @Input() sublabel: string;\n\n  /**\n   * expand?: boolean\n   * Toggles [TdExpansionPanelComponent] between expand/collapse.\n   */\n  @Input('expand')\n  set expand(expand: boolean) {\n    this._setExpand(expand);\n  };\n  get expand(): boolean {\n    return this._expand;\n  };\n\n  /**\n   * disabled?: boolean\n   * Disables icon and header, blocks click event and sets [TdStepComponent] to deactive if 'true'.\n   */\n  @Input('disabled')\n  set disabled(disabled: boolean) {\n    if (disabled && this._expand) {\n      this._expand = false;\n      this._onCollapsed();\n    }\n    this._disabled = disabled;\n  };\n  get disabled(): boolean {\n    return this._disabled;\n  };\n\n  /**\n   * expanded?: function\n   * Event emitted when [TdExpansionPanelComponent] is expanded.\n   */\n  @Output() expanded: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * collapsed?: function\n   * Event emitted when [TdExpansionPanelComponent] is collapsed.\n   */\n  @Output() collapsed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Method executed when [TdExpansionPanelComponent] is clicked.\n   */\n  clickEvent(): void {\n    this._setExpand(!this._expand);\n  };\n\n  /**\n   * Toggle expand state of [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  toggle(): boolean {\n    return this._setExpand(!this._expand);\n  }\n\n  /**\n   * Opens [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  open(): boolean {\n    return this._setExpand(true);\n  }\n\n  /**\n   * Closes [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  close(): boolean {\n    return this._setExpand(false);\n  }\n\n  /**\n   * Method to change expand state internally and emit the [onExpanded] event if 'true' or [onCollapsed]\n   * event if 'false'. (Blocked if [disabled] is 'true')\n   */\n  private _setExpand(newExpand: boolean): boolean {\n    if (this._disabled) {\n      return false;\n    }\n    if (this._expand !== newExpand) {\n      this._expand = newExpand;\n      if (newExpand) {\n        this._onExpanded();\n      } else {\n        this._onCollapsed();\n      }\n      return true;\n    }\n    return false;\n  };\n\n  private _onExpanded(): void {\n    this.expanded.emit(undefined);\n  };\n\n  private _onCollapsed(): void {\n    this.collapsed.emit(undefined);\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}