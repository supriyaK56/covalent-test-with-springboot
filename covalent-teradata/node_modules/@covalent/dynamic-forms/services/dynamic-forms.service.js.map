{"version":3,"file":"dynamic-forms.service.js","sourceRoot":"","sources":["dynamic-forms.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Validators, ValidatorFn, FormControl } from '@angular/forms';\n\nimport { TdMaxValidator, TdMinValidator, TdNumberRequiredValidator } from '../../core';\n\nimport { TdDynamicInputComponent } from '../dynamic-elements/dynamic-input/dynamic-input.component';\nimport { TdDynamicTextareaComponent } from '../dynamic-elements/dynamic-textarea/dynamic-textarea.component';\nimport { TdDynamicSlideToggleComponent } from '../dynamic-elements/dynamic-slide-toggle/dynamic-slide-toggle.component';\nimport { TdDynamicCheckboxComponent } from '../dynamic-elements/dynamic-checkbox/dynamic-checkbox.component';\nimport { TdDynamicSliderComponent } from '../dynamic-elements/dynamic-slider/dynamic-slider.component';\nimport { TdDynamicSelectComponent } from '../dynamic-elements/dynamic-select/dynamic-select.component';\n\nexport enum TdDynamicType {\n  Text = <any>'text',\n  Boolean = <any>'boolean',\n  Number = <any>'number',\n  Array = <any>'array',\n}\n\nexport enum TdDynamicElement {\n  Input = <any>'input',\n  Textarea = <any>'textarea',\n  Slider = <any>'slider',\n  SlideToggle = <any>'slide-toggle',\n  Checkbox = <any>'checkbox',\n  Select = <any>'select',\n}\n\nexport interface ITdDynamicElementConfig {\n  label?: string;\n  name: string;\n  type: TdDynamicType | TdDynamicElement;\n  required?: boolean;\n  min?: any;\n  max?: any;\n  selections?: any[];\n  default?: any;\n}\n\nexport const DYNAMIC_ELEMENT_NAME_REGEX: RegExp = /^[a-zA-Z]+[a-zA-Z0-9-_]*$/;\n\n@Injectable()\nexport class TdDynamicFormsService {\n\n  /**\n   * Method to validate if the [name] is a proper element name.\n   * Throws error if name is not valid.\n   */\n  validateDynamicElementName(name: string): void {\n    if (!DYNAMIC_ELEMENT_NAME_REGEX.test(name)) {\n      throw new Error(`Dynamic element name: \"${name}\" is not valid.`);\n    }\n  }\n\n  /**\n   * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]\n   * Throws error if it does not exists or not supported.\n   */\n  getDynamicElement(element: TdDynamicElement | TdDynamicType): any {\n    switch (element) {\n      case TdDynamicType.Text:\n      case TdDynamicType.Number:\n      case TdDynamicElement.Input:\n        return TdDynamicInputComponent;\n      case TdDynamicElement.Textarea:\n        return TdDynamicTextareaComponent;\n      case TdDynamicType.Boolean:\n      case TdDynamicElement.SlideToggle:\n        return TdDynamicSlideToggleComponent;\n      case TdDynamicElement.Checkbox:\n        return TdDynamicCheckboxComponent;\n      case TdDynamicElement.Slider:\n        return TdDynamicSliderComponent;\n      case TdDynamicType.Array:\n      case TdDynamicElement.Select:\n        return TdDynamicSelectComponent;\n      default:\n        throw new Error(`Error: type ${element} does not exist or not supported.`);\n    }\n  }\n\n  /**\n   * Gets default flex for element depending on [TdDynamicElement | TdDynamicType].\n   * Throws error if it does not exists or not supported.\n   */\n  getDefaultElementFlex(element: TdDynamicElement | TdDynamicType): any {\n    switch (element) {\n      case TdDynamicType.Text:\n      case TdDynamicType.Number:\n      case TdDynamicElement.Slider:\n      case TdDynamicElement.Input:\n      case TdDynamicType.Array:\n      case TdDynamicElement.Select:\n        return 45;\n      case TdDynamicElement.Textarea:\n        return 95;\n      case TdDynamicType.Boolean:\n      case TdDynamicElement.Checkbox:\n      case TdDynamicElement.SlideToggle:\n        return 20;\n      default:\n        throw new Error(`Error: type ${element} does not exist or not supported.`);\n    }\n  }\n\n  /**\n   * Creates form control for element depending [ITdDynamicElementConfig] properties.\n   */\n  createFormControl(config: ITdDynamicElementConfig): FormControl {\n    let validator: ValidatorFn = this.createValidators(config);\n    return new FormControl(config.default, validator);\n  }\n\n  /**\n   * Creates form validationdepending [ITdDynamicElementConfig] properties.\n   */\n  createValidators(config: ITdDynamicElementConfig): ValidatorFn {\n    let validator: ValidatorFn;\n    if (config.required) {\n      validator = config.type === TdDynamicType.Number ? TdNumberRequiredValidator.validate : Validators.required;\n    }\n    if (config.max || config.max === 0) {\n      validator = Validators.compose([validator, TdMaxValidator.validate(config.max)]);\n    }\n    if (config.min || config.min === 0) {\n      validator = Validators.compose([validator, TdMinValidator.validate(config.min)]);\n    }\n    return validator;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}