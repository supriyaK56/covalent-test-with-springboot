{"version":3,"file":"http-interceptor.service.js","sourceRoot":"","sources":["http-interceptor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Type, Injector } from '@angular/core';\nimport { Http, RequestOptionsArgs, Response, Request, RequestMethod } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nimport { IHttpInterceptor } from './http-interceptor.interface';\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\n\nexport interface IHttpInterceptorConfig {\n  interceptor: Type<any>;\n  paths: string[];\n}\n\n@Injectable()\nexport class HttpInterceptorService {\n\n  private _requestInterceptors: IHttpInterceptorMapping[] = [];\n\n  constructor(private _http: Http,\n              private _injector: Injector,\n              private _httpInterceptorMatcher: IHttpInterceptorMatcher,\n              requestInterceptorConfigs: IHttpInterceptorConfig[]) {\n    requestInterceptorConfigs.forEach((config: IHttpInterceptorConfig) => {\n      this._requestInterceptors.push({\n        interceptor: <IHttpInterceptor>_injector.get(config.interceptor),\n        paths: config.paths,\n      });\n    });\n  }\n\n  public delete(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Delete;\n    return this.request(url, requestOptions);\n  }\n\n  public get(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Get;\n    return this.request(url, requestOptions);\n  }\n\n  public head(url: string, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Head;\n    return this.request(url, requestOptions);\n  }\n\n  public patch(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Patch;\n    requestOptions.body = data;\n    return this.request(url, requestOptions);\n  }\n\n  public post(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Post;\n    requestOptions.body = data;\n    return this.request(url, requestOptions);\n  }\n\n  public put(url: string, data: any, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    requestOptions.url = url;\n    requestOptions.method = RequestMethod.Put;\n    requestOptions.body = data;\n    return this.request(url, requestOptions);\n  }\n\n  public request(url: string | Request, requestOptions: RequestOptionsArgs = {}): Observable<Response> {\n    let requestUrl: string;\n    if (url instanceof Request) {\n      requestUrl = url.url ? url.url : requestOptions.url;\n    } else {\n      requestUrl = url;\n    }\n    if (!requestOptions.url) {\n      requestOptions.url = requestUrl;\n    }\n    let interceptors: IHttpInterceptor[] = this._requestInterceptors.filter((mapping: IHttpInterceptorMapping) => {\n      return this._httpInterceptorMatcher.matches(requestOptions, mapping);\n    }).map((mapping: IHttpInterceptorMapping) => {\n      return mapping.interceptor;\n    });\n    return this._setupRequest(url, requestOptions, interceptors);\n  }\n\n  private _setupRequest(url: string | Request,\n                        requestOptions: RequestOptionsArgs,\n                        interceptors: IHttpInterceptor[]): Observable<Response> {\n    try {\n      requestOptions = this._requestResolve(requestOptions, interceptors);\n    } catch (e) {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        subscriber.error(e);\n      });\n    }\n    return new Observable<any>((subscriber: Subscriber<any>) => {\n      this._http.request(url, requestOptions)\n      .subscribe((response: Response) => {\n        subscriber.next(this._responseResolve(response, interceptors));\n        subscriber.complete();\n      }, (error: Response) => {\n        subscriber.error(this._responseErrorResolve(error, interceptors));\n      });\n    });\n  }\n\n  private _requestResolve(requestOptions: RequestOptionsArgs, interceptors: IHttpInterceptor[]): RequestOptionsArgs {\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\n      if (interceptor.onRequest) {\n        try {\n          requestOptions = interceptor.onRequest(requestOptions);\n        } catch (e) {\n          if (interceptor.onRequestError) {\n            requestOptions = interceptor.onRequestError(requestOptions);\n            if (!requestOptions) {\n              throw e;\n            }\n          } else {\n            throw e;\n          }\n        }\n      }\n    });\n    return requestOptions;\n  }\n\n  private _responseResolve(response: Response, interceptors: IHttpInterceptor[]): Response {\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\n      if (interceptor.onResponse) {\n        response = interceptor.onResponse(response);\n      }\n    });\n    return response;\n  }\n\n  private _responseErrorResolve(error: Response, interceptors: IHttpInterceptor[]): Response {\n    interceptors.forEach((interceptor: IHttpInterceptor) => {\n      if (interceptor.onResponseError) {\n        error = interceptor.onResponseError(error);\n      }\n    });\n    return error;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}