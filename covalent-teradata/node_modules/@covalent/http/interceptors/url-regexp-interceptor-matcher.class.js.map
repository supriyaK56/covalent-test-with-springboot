{"version":3,"file":"url-regexp-interceptor-matcher.class.js","sourceRoot":"","sources":["url-regexp-interceptor-matcher.class.ts"],"names":[],"mappings":"AAKA;;;GAGG;AACH;IAAA;IAeA,CAAC;IAbC,6CAAO,GAAP,UAAQ,OAA2B,EAAE,OAAgC;QACnE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAY;YACvC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;iBACxB,OAAO,CAAC,MAAM,EAAE,kBAAkB,CAAC;iBACnC,OAAO,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,IAAI,IAAI,cAAc,CAAC;gBACvB,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5C,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAChB,CAAC;IAEH,kCAAC;AAAD,CAAC,AAfD,IAeC","sourcesContent":["import { RequestOptionsArgs } from '@angular/http';\n\nimport { IHttpInterceptorMapping } from './http-interceptor-mapping.interface';\nimport { IHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\n\n/**\n * Concrete implementation for http interceptor matchers.\n * This implementation uses regex to check mapping paths vs request url.\n */\nexport class URLRegExpInterceptorMatcher implements IHttpInterceptorMatcher {\n\n  matches(options: RequestOptionsArgs, mapping: IHttpInterceptorMapping): boolean {\n    return mapping.paths.filter((path: string) => {\n      path = path.replace(/\\*\\*/gi, '<>')\n                .replace(/\\*/gi, '[a-zA-Z0-9\\\\-_]+')\n                .replace(/<>/gi, '[a-zA-Z0-9\\\\-_\\/]*');\n      if (path) {\n        path += '(\\\\?{1}.*)?$';\n        return new RegExp(path).test(options.url);\n      }\n      return false;\n    }).length > 0;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}