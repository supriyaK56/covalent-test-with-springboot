{"version":3,"file":"http-rest.service.js","sourceRoot":"","sources":["http-rest.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAyC,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AA6B7C;IAUE,qBAAY,IAAW,EAAE,MAAmB;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;QAC5E,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,GAAG,cAAM,OAAA,IAAI,OAAO,EAAE,EAAb,CAAa,CAAC;QAC3F,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,GAAG,UAAC,QAAkB,IAAU,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;IACtG,CAAC;IAEM,2BAAK,GAAZ,UAAa,KAAkB,EAAE,SAA0B;QAA3D,iBAgBC;QAfC,IAAI,OAAO,GAAyB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC/G,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAa;YAC/B,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;YACD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,UAA2B;gBACrD,IAAI,CAAC;oBACH,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,yBAAG,GAAV,UAAW,EAAmB,EAAE,SAA0B;QAA1D,iBAgBC;QAfC,IAAI,OAAO,GAAyB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACjG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAa;YAC/B,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;YACD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,UAA2B;gBACrD,IAAI,CAAC;oBACH,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4BAAM,GAAb,UAAc,GAAM,EAAE,SAA0B;QAAhD,iBAqBC;QApBC,IAAI,cAAc,GAAuB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACpE,IAAI,OAAO,GAAyB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;QACzF,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAa;YAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;gBACD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,UAA2B;gBACrD,IAAI,CAAC;oBACH,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4BAAM,GAAb,UAAc,EAAmB,EAAE,GAAM,EAAE,SAA0B;QAArE,iBAqBC;QApBC,IAAI,cAAc,GAAuB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACpE,IAAI,OAAO,GAAyB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;QAC5F,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAa;YAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;gBACD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,UAA2B;gBACrD,IAAI,CAAC;oBACH,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4BAAM,GAAb,UAAc,EAAmB,EAAE,SAA0B;QAA7D,iBAoBC;QAnBC,IAAI,OAAO,GAAyB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACpG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAa;YAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;gBACD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,UAA2B;gBACrD,IAAI,CAAC;oBACH,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAES,yCAAmB,GAA7B;QACE,IAAI,cAAc,GAAY,IAAI,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,KAAe,EAAE,GAAW;YACrD,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC,OAAO,CAAC,UAAC,KAAe,EAAE,GAAW;YAC1D,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,IAAI,cAAc,GAAuB;YACvC,OAAO,EAAE,cAAc;SACxB,CAAC;QACF,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;IAES,8BAAQ,GAAlB,UAAmB,EAAoB,EAAE,KAAkB;QACzD,IAAI,GAAG,GAAW,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAC/C,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,GAAG,IAAI,MAAI,EAAI,CAAC;QAClB,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,GAAG,GAAM,IAAI,CAAC,KAAK,SAAI,GAAK,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAES,gCAAU,GAApB,UAAqB,KAAiB;QACpC,IAAI,GAAG,GAAW,EAAE,CAAC;QACrB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,GAAG,IAAI,GAAG,CAAC;YACX,IAAI,MAAM,GAAa,EAAE,CAAC;YAC1B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;gBACtB,IAAI,KAAK,GAA8B,KAAK,CAAC,GAAG,CAAC,CAAC;gBAClD,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,IAAI,CAAI,GAAG,SAAI,KAAO,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;YACD,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IACH,kBAAC;AAAD,CAAC,AApKD,IAoKC","sourcesContent":["import { Headers, RequestOptionsArgs, Response, Request } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nexport interface IRestTransform {\n  (response: Response): any;\n}\n\nexport interface IRestConfig {\n  baseHeaders?: Headers;\n  dynamicHeaders?: () => Headers;\n  baseUrl: string;\n  path?: string;\n  transform?: IRestTransform;\n}\n\nexport interface IRestQuery {\n  [key: string]: any;\n}\n\nexport interface IHttp {\n  delete: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\n  get: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\n  head: (url: string, options?: RequestOptionsArgs) => Observable<Response>;\n  patch: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\n  post: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\n  put: (url: string, body: any, options?: RequestOptionsArgs) => Observable<Response>;\n  request: (url: string | Request, options?: RequestOptionsArgs) => Observable<Response>;\n}\n\nexport abstract class RESTService<T> {\n\n  private _path: string;\n  private _base: string;\n  private _baseHeaders: Headers;\n  private _dynamicHeaders: () => Headers;\n\n  protected transform: IRestTransform;\n  protected http: IHttp;\n\n  constructor(http: IHttp, config: IRestConfig) {\n    this.http = http;\n    this._base = config.baseUrl.replace(/\\/$/, '');\n    this._path = config.path.replace(/^\\//, '');\n    this._baseHeaders = config.baseHeaders ? config.baseHeaders : new Headers();\n    this._dynamicHeaders = config.dynamicHeaders ? config.dynamicHeaders : () => new Headers();\n    this.transform = config.transform ? config.transform : (response: Response): any => response.json();\n  }\n\n  public query(query?: IRestQuery, transform?: IRestTransform): Observable<any> {\n    let request: Observable<Response> = this.http.get(this.buildUrl(undefined, query), this.buildRequestOptions());\n    return request.map((res: Response) => {\n      if (transform) {\n        return transform(res);\n      }\n      return this.transform(res);\n    }).catch((error: Response) => {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        try {\n          subscriber.error(this.transform(error));\n        } catch (err) {\n          subscriber.error(error);\n        }\n      });\n    });\n  }\n\n  public get(id: string | number, transform?: IRestTransform): Observable<any> {\n    let request: Observable<Response> = this.http.get(this.buildUrl(id), this.buildRequestOptions());\n    return request.map((res: Response) => {\n      if (transform) {\n        return transform(res);\n      }\n      return this.transform(res);\n    }).catch((error: Response) => {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        try {\n          subscriber.error(this.transform(error));\n        } catch (err) {\n          subscriber.error(error);\n        }\n      });\n    });\n  }\n\n  public create(obj: T, transform?: IRestTransform): Observable<any> {\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\n    let request: Observable<Response> = this.http.post(this.buildUrl(), obj, requestOptions);\n    return request.map((res: Response) => {\n      if (res.status === 201) {\n        if (transform) {\n          return transform(res);\n        }\n        return this.transform(res);\n      } else {\n        return res;\n      }\n    }).catch((error: Response) => {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        try {\n          subscriber.error(this.transform(error));\n        } catch (err) {\n          subscriber.error(error);\n        }\n      });\n    });\n  }\n\n  public update(id: string | number, obj: T, transform?: IRestTransform): Observable<any> {\n    let requestOptions: RequestOptionsArgs = this.buildRequestOptions();\n    let request: Observable<Response> = this.http.patch(this.buildUrl(id), obj, requestOptions);\n    return request.map((res: Response) => {\n      if (res.status === 200) {\n        if (transform) {\n          return transform(res);\n        }\n        return this.transform(res);\n      } else {\n        return res;\n      }\n    }).catch((error: Response) => {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        try {\n          subscriber.error(this.transform(error));\n        } catch (err) {\n          subscriber.error(error);\n        }\n      });\n    });\n  }\n\n  public delete(id: string | number, transform?: IRestTransform): Observable<any> {\n    let request: Observable<Response> = this.http.delete(this.buildUrl(id), this.buildRequestOptions());\n    return request.map((res: Response) => {\n      if (res.status === 200) {\n        if (transform) {\n          return transform(res);\n        }\n        return this.transform(res);\n      } else {\n        return res;\n      }\n    }).catch((error: Response) => {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        try {\n          subscriber.error(this.transform(error));\n        } catch (err) {\n          subscriber.error(error);\n        }\n      });\n    });\n  }\n\n  protected buildRequestOptions(): RequestOptionsArgs {\n    let requestHeaders: Headers = new Headers();\n    this._baseHeaders.forEach((value: string[], key: string) => {\n      requestHeaders.set(key, value);\n    });\n    this._dynamicHeaders().forEach((value: string[], key: string) => {\n      requestHeaders.set(key, value);\n    });\n    let requestOptions: RequestOptionsArgs = {\n      headers: requestHeaders,\n    };\n    return requestOptions;\n  }\n\n  protected buildUrl(id?: string | number, query?: IRestQuery): string {\n    let url: string = this._path ? this._path : '';\n    if (id) {\n      url += `/${id}`;\n    }\n    if (query) {\n      url += this.buildQuery(query);\n    }\n    url = `${this._base}/${url}`;\n    return url;\n  }\n\n  protected buildQuery(query: IRestQuery): string {\n    let url: string = '';\n    if (query) {\n      url += '?';\n      let params: string[] = [];\n      for (let key in query) {\n        let value: string | number | boolean = query[key];\n        if (value !== undefined) {\n          params.push(`${key}=${value}`);\n        }\n      }\n      url += params.join('&');\n    }\n    return url;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}