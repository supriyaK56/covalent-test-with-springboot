{"version":3,"file":"highlight.component.js","sourceRoot":"","sources":["highlight.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Renderer, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.css'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit {\n\n  private _content: string;\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    this._loadContent(this._content);\n  }\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang') language: string = 'typescript';\n\n  constructor(private _renderer: Renderer,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngAfterViewInit(): void {\n    if (!this.language) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Parse html string into actual HTML elements.\n      let preElement: HTMLPreElement = this._elementFromString(this._render(code));\n      // Clean container\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Project DIV element into container\n      this._renderer.projectNodes(this._elementRef.nativeElement, [preElement]);\n    }\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement(this._elementRef.nativeElement, 'pre');\n    const codeElement: HTMLElement = this._renderer.createElement(preElement, 'code');\n    // Set .highlight class into <code> element\n    this._renderer.setElementClass(codeElement, 'highlight', true);\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    let codeToParse: string =  lines.join('\\n')\n    .replace(/\\{ \\{/gi, '{{').replace(/\\} \\}/gi, '}}')\n    .replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');  // replace with < and > to render HTML in angular 2\n\n    // Parse code with highlight.js depending on language\n    let highlightedCode: any = hljs.highlight(this.language, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}